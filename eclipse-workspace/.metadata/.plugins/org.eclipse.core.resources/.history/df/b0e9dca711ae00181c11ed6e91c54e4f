package com.bbn.sd2;

import static org.junit.Assert.fail;

import java.net.URI;
import java.util.UUID;

import javax.xml.namespace.QName;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.ParseException;
import org.junit.AfterClass;
import org.junit.Test;
import org.mortbay.log.Log;
import org.sbolstandard.core2.Annotation;
import org.sbolstandard.core2.ModuleDefinition;
import org.sbolstandard.core2.SBOLDocument;
import org.sbolstandard.core2.SBOLValidationException;
import org.sbolstandard.core2.TopLevel;
import org.synbiohub.frontend.SynBioHubException;

public class TestSynBioHubAccessor {

	private static final String test_collection = "scratch-test";
	
	public void initializeTestInstance() throws ParseException, SynBioHubException {
		// Do not initiate tests if password for SBH instance is not provided
		String password = System.getProperty("p");
    	if (password == null) {
			fail("Unable to initialize test environment. Password for SynBioHub staging instance was not provided.");
		}
    	String[] options = new String[] {"-S", "https://hub-staging.sd2e.org", "-f", "https://hub.sd2e.org", "-p", ""};
    	options[options.length - 1] = password;  // Add password to command line
		SynBioHubAccessor.main(options);		
	}
	
	@Test
	public void testSanitize() {
        String name = "scratch-test";
        assert(SynBioHubAccessor.sanitizeNameToDisplayID(name).equals("scratch0x2Dtest"));
	}
	
    @Test
    public void testAccess() throws Exception {
    	initializeTestInstance();
    	SBOLDocument document = SynBioHubAccessor.newBlankDocument();
        String description = UUID.randomUUID().toString();
        ModuleDefinition m = document.createModuleDefinition(SynBioHubAccessor.sanitizeNameToDisplayID(test_collection), "1");
        m.setName(test_collection);
        m.setDescription(description);
        SynBioHubAccessor.update(document);
        final URI testURI = URI.create(SynBioHubAccessor.getCollectionPrefix() + m.getDisplayId() + "/1");
        SBOLDocument doc = SynBioHubAccessor.retrieve(testURI);

        // This assertion only works if the clean method works and each test runs on a fresh scratch_collection Collection
        // otherwise the user must manually delete the scratch_collection prior to each run
//        TopLevel tl = doc.getTopLevels().iterator().next();
//        assert(tl.getName().equals(name));
//        assert(tl.getDescription().equals(description));
    }
    
    /* Test that SBH correctly overwrites rather than merges annotations, as this behavior
     * appears inconsistent on different SBH versions */
    @Test
    public void overwriteAnnotation() throws Exception {
    	initializeTestInstance();
        QName DUMMY_ANNOTATION = new QName("http://sd2e.org#","dummy","sd2");
    	SBOLDocument doc = SynBioHubAccessor.newBlankDocument();
        ModuleDefinition m = doc.createModuleDefinition(SynBioHubAccessor.sanitizeNameToDisplayID("Annotation_test"), "1");
        m.createAnnotation(DUMMY_ANNOTATION, "foo");
        SynBioHubAccessor.update(doc);
        URI m_uri = m.getIdentity();
        System.out.println(SynBioHubAccessor.translateLocalURI(m_uri));
        doc = SynBioHubAccessor.retrieve(SynBioHubAccessor.translateLocalURI(m_uri));
        m = doc.getModuleDefinitions().iterator().next();

        assert(m.getIdentity().equals(m_uri));
        assert(m.getAnnotation(DUMMY_ANNOTATION).getStringValue().equals("foo"));
    	
        // Clear annotations
        while(m.getAnnotation(DUMMY_ANNOTATION)!=null) { 
            m.removeAnnotation(m.getAnnotation(DUMMY_ANNOTATION));
        }
        SynBioHubAccessor.update(doc);
        doc = SynBioHubAccessor.retrieve(SynBioHubAccessor.translateLocalURI(m_uri));
        m = doc.getModuleDefinitions().iterator().next();
        doc.write(System.out);
        assert(m.getAnnotation(DUMMY_ANNOTATION) == null);
    }
    

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		if (System.getProperty("c") != null && System.getProperty("c").toLowerCase().equals("true"))	
			SynBioHubAccessor.clean();
	}

    
}
